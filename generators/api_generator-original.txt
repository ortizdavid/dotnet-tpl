package generators

import (
	apiTemplates "github.com/ortizdavid/dotnet-tpl/templates/api"
	dbTemplates "github.com/ortizdavid/dotnet-tpl/templates/api/database"
	fileTemplates "github.com/ortizdavid/dotnet-tpl/templates/api/files"
	extTemplates "github.com/ortizdavid/dotnet-tpl/templates/api/extensions"
	helperTemplates "github.com/ortizdavid/dotnet-tpl/templates/api/helpers"
	modelTemplates "github.com/ortizdavid/dotnet-tpl/templates/api/models"
	repoTemplates "github.com/ortizdavid/dotnet-tpl/templates/api/repositories"
	contTemplates "github.com/ortizdavid/dotnet-tpl/templates/api/controllers"
	"github.com/ortizdavid/go-nopain/filemanager"
)

type ApiGenerator struct {
}

func (api ApiGenerator) Gernerate(templateType string) error {
	var fileManager filemanager.FileManager
	// templates Structs
	var apiTpl apiTemplates.ApiTemplate
	var dbTpl dbTemplates.ApiDatabaseTemplate
	var fileTpl fileTemplates.ApiFilesTemplate
	var extTpl extTemplates.ApiExtensionsTemplate
	var helTpl helperTemplates.ApiHelpersTemplate
	var modTpl modelTemplates.ApiModelsTemplate
	var repTpl repoTemplates.ApiRepositoriesTemplate
	var conTpl contTemplates.ApiControllersTemplate


	//Folders---------------------------------------------------------
	apiCollectionsFolder := "_Api_Collections"
	uploadsFolder := "_Uploads"
	databaseFolder := "_Database"
	filesFolder := "_Files"
	extensionsFolder := "Extensions"
	helpersFolder := "Helpers"
	modelsFolder := "Models"
	repositoriesFolder := "Repositories"
	controllersFolder := "Controllers"
	
	//Files outter folder ----------------------------------------------
	dockerFile := "Dockerfile"
	dockerignoreFile := ".dockerignore"
	gitignoreFile := ".gitignore"
	readmeMdFile := "README.md"
	appsettingsFile := "appsettings.json"
	packagesFile := "packages.sh"
	programCsFile := "Program.cs"

	//Files inner folder ------------------------------
	// files from /_Database
	databaseFile := "db_dotnet_product.sql"
	// files from /_Files
	categoriesCsvFile := "categories-for-import.csv"
	productsCsvFile := "products-for-import.csv"
	suppliersCsvFile := "suppliers-for-import.csv"
	// files from /Controllers
	authControllerFile := "AuthController.cs"
	categoriesControllerFile := "CategoriesController.cs"
	productsControllerFile := "ProductsControllers.cs"
	productsReportControllerFile := "ProductsReportController.cs"
	suppliersControllerFile := "SuppliersController.cs"
	usersControllerFile := "UsersController.cs"
	// files from /Extensions
	authExtensionsFile := "AuthExtensions.cs"
	repositoryExtensionsFile := "RepositoryExtensions.cs"
	// files from /Helpers
	capacityUnitFile := "CapacityUnit.cs"
	encryptionFile := "Encryption.cs"
	fileExtensionsFile := "FileExtensions.cs"
	fileUploaderFile := "FileUploader.cs"
	passwordHelperFile := "PasswordHelper.cs"
	// files from /Models
	appDbContextFile := "AppDbContext.cs"
	categoryFile := "Category.cs"
	imageFile := "Image.cs"
	loginRequestFile := "LoginRequest.cs"
	productFile := "Product.cs"
	productDataFile := "ProductData.cs"
	productReportFile := "ProductReport.cs"
	supplierFile := "Supplier.cs"
	userFile := "User.cs"
	// files from /Repositories
	iRepositoryFile := "IRepository.cs"
	categoryRepositoryFile := "CategoryRepository.cs"
	imageRepositoryFile := "ImageRepository.cs"
	productRepositoryFile := "ProductRepository.cs"
	productReportRepositoryFile := "ProductReportRepository.cs"
	supplierRepositoryFile := "SupplierRepository.cs"
	userReositoryFile := "UserRepository.cs"

	//Create Files--------------------------------------------------
	//Create Files outter folder
	fileManager.CreateSingleFile(".", dockerFile)
	fileManager.CreateSingleFile(".", dockerignoreFile)
	fileManager.CreateSingleFile(".", gitignoreFile)
	fileManager.CreateSingleFile(".", readmeMdFile)
	fileManager.CreateSingleFile(".", appsettingsFile)
	fileManager.CreateSingleFile(".", packagesFile)
	fileManager.CreateSingleFile(".", programCsFile)

	//Create Files---------------------------------------------------------------
	// files from /Extensions
	fileManager.CreateSingleFolder(apiCollectionsFolder)
	fileManager.CreateSingleFolder(uploadsFolder)
	fileManager.CreateSingleFolder(databaseFolder)
	fileManager.CreateSingleFolder(filesFolder)
	fileManager.CreateSingleFolder(extensionsFolder)
	fileManager.CreateSingleFolder(helpersFolder)
	fileManager.CreateSingleFolder(modelsFolder)
	fileManager.CreateSingleFolder(repositoriesFolder)
	fileManager.CreateSingleFolder(controllersFolder)
	
	//Write to files --------------------------------------------------------------
	//Write to files from otter folder
	fileManager.WriteFile(".", dockerFile, apiTpl.Dockerfile())
	fileManager.WriteFile(".", dockerignoreFile, apiTpl.Dockerignore())
	fileManager.WriteFile(".", gitignoreFile, apiTpl.Gitignore())
	fileManager.WriteFile(".", readmeMdFile, apiTpl.ReadmeMd())
	fileManager.WriteFile(".", appsettingsFile, apiTpl.Appsettings())
	fileManager.WriteFile(".", packagesFile, apiTpl.Packages())
	fileManager.WriteFile(".", programCsFile, apiTpl.ProgramCs())
	// files from /_Files

	// files from /_Database

	// files from /Controllers
	
	// files from /Extensions
	fileManager.WriteFile(extensionsFolder, authExtensionsFile, extTpl.AuthExtensionsCs())
	fileManager.WriteFile(extensionsFolder, repositoryExtensionsFile, extTpl.RepositoryExtensionsCs())
	// files from /Helpers
	fileManager.WriteFile(extensionsFolder, capacityUnitFile, helTpl.CapacityUnitCs())
	fileManager.WriteFile(extensionsFolder, encryptionFile, helTpl.EncryptionCs())
	fileManager.WriteFile(extensionsFolder, fileExtensionsFile, helTpl.FileExtensionsCs())
	fileManager.WriteFile(extensionsFolder, fileUploaderFile, helTpl.FileUploaderCs())
	fileManager.WriteFile(extensionsFolder, passwordHelperFile, helTpl.PasswordHelperCs())
	// files from /Models

	// files from /Repositories

	return nil
}